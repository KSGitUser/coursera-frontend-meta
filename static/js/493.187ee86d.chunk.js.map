{"version":3,"file":"static/js/493.187ee86d.chunk.js","mappings":"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","sources":["hooks/useSubmit.js","components/BookingForm/BookingForm.jsx","api/fetchApi.js","Pages/BookingPage.jsx"],"sourcesContent":["import { useState } from 'react'\n\nconst wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms))\n\n/**\n * This is a custom hook that can be used to submit a form and simulate an API call\n * It uses Math.random() to simulate a random success or failure, with 50% chance of each\n */\nconst useSubmit = () => {\n  const [isLoading, setLoading] = useState(false)\n  const [response, setResponse] = useState(null)\n\n  const submit = async (url, data) => {\n    const random = Math.random()\n    setLoading(true)\n    try {\n      await wait(2000)\n      if (random < 0.5) {\n        throw new Error('Something went wrong')\n      }\n      setResponse({\n        type: 'success',\n        message: `Thanks for your submission ${data.firstName}, we will get back to you shortly!`\n      })\n    } catch (error) {\n      setResponse({\n        type: 'error',\n        message: 'Something went wrong, please try again later!'\n      })\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return { isLoading, response, submit }\n}\n\nexport default useSubmit\n","import React, { useEffect, useRef, useState, useMemo } from 'react'\nimport {\n  Box,\n  Button,\n  Heading,\n  VStack,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  NumberInput,\n  NumberInputField,\n  FormErrorMessage\n} from '@chakra-ui/react'\nimport useSubmit from '../../hooks/useSubmit'\nimport { useAlertContext } from '../../context/alertContext'\nimport { object, string, date } from 'yup'\n\nconst occasionValues = [\n  { value: 'Birthday', label: 'Birthday' },\n  { value: 'Anniversary', label: 'Anniversary' }\n]\nconst BookingForm = ({\n  availableTimes,\n  updateTimes,\n  formDate,\n  setFormDate,\n  submitForm\n}) => {\n  const { isLoading, response } = useSubmit()\n  const { onOpen } = useAlertContext()\n  const formRef = useRef(null)\n\n  const [formNumberInput, setFormNumberInput] = useState('')\n  const [formOccasion, setFormOccasion] = useState('')\n  const [formName, setFormName] = useState('')\n  const [formEmail, setFormEmail] = useState('')\n  const [formErrors, setFormErrors] = useState({})\n\n  const selectedTime = useMemo(() => {\n    for (const timeItem of availableTimes) {\n      if (timeItem?.selected) {\n        return timeItem.value\n      }\n    }\n    return ''\n  }, [availableTimes])\n\n  const onFormSubmit = async (e) => {\n    e.preventDefault()\n    const formData = new FormData(e.target)\n\n    const formShema = object({\n      name: string().required(),\n      email: string().required().email(),\n      date: date().default(() => new Date()),\n      time: string().required(),\n      numberInput: string().required(),\n      occasion: string().required()\n    })\n\n    let errors = {}\n    try {\n      setFormErrors({})\n      await formShema.validate(\n        Object.fromEntries([...formData.entries()]), { abortEarly: false })\n    } catch (err) {\n      errors = err.inner.reduce((acc, error) => {\n        return {\n          ...acc,\n          [error.path]: error.message\n        }\n      }, {})\n      setFormErrors(errors)\n    }\n    if (!Object.keys(errors).length) {\n      submitForm(formData)\n    }\n  }\n\n  useEffect(() => {\n    if (response) {\n      const { type, message } = response\n      onOpen(type, message)\n      if (type === 'success') {\n        // TODO reset form\n      }\n    }\n  }, [response, onOpen])\n\n  return (\n    <div\n      spacing={8}\n    >\n      <VStack w='100%' maxW='1024px' p={8} alignItems='flex-start' className='container'>\n        <Box py={6} rounded='md' w='100%'>\n          <form ref={(e) => { if (!formRef.current && e) { formRef.current = e.target } }} onSubmit={onFormSubmit}>\n            <VStack spacing={4}>\n              <Box w='100%'>\n                <Heading variant='subtitle' mb={6} as='h2'>Reservation data:</Heading>\n                <FormControl>\n                  <FormLabel htmlFor='date'>Choose date</FormLabel>\n                  <Input\n                    type='date'\n                    variant='flushed'\n                    id='date'\n                    name='date'\n                    value={formDate}\n                    onChange={(e) => { setFormDate(e.target.value) }}\n                  />\n                </FormControl>\n                <FormControl>\n                  <FormLabel htmlFor='time'>Choose time</FormLabel>\n                  <Select\n                    data-testid='form-time-select'\n                    variant='flushed'\n                    id='time'\n                    name='time'\n                    value={selectedTime}\n                    onChange={(e) => {\n                      updateTimes({\n                        type: 'set_time',\n                        payload: { time: e.target.value, date: formDate }\n                      })\n                    }}\n                  >\n                    {availableTimes.map(avTime => <option disabled={avTime.booked} key={avTime.value} value={avTime.value}>{avTime.label}</option>)}\n                  </Select>\n                </FormControl>\n                <FormControl isInvalid={formErrors.numberInput}>\n                  <FormLabel htmlFor='numberInput'>Choose number of geusts</FormLabel>\n                  <NumberInput\n                    variant='flushed'\n                    id='numberInput'\n                    name='numberInput'\n                    min={1}\n                    max={10}\n                  >\n                    <NumberInputField\n                      data-testid='form-guests-input'\n                      value={formNumberInput}\n                      onChange={(e) => { setFormNumberInput(e.target.value) }}\n                    />\n                  </NumberInput>\n                  <FormErrorMessage data-testid='form-guests-error'>{formErrors.numberInput}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={formErrors.occasion}>\n                  <FormLabel htmlFor='time'>Occasion</FormLabel>\n                  <Select\n                    data-testid='form-ocassion-select'\n                    variant='flushed'\n                    id='occasion'\n                    name='occasion'\n                    value={formOccasion}\n                    onChange={(e) => { setFormOccasion(e.target.value) }}\n                  >\n                    {occasionValues.map(avTime => <option key={avTime.value} value={avTime.value}>{avTime.label}</option>)}\n                  </Select>\n                  <FormErrorMessage>{formErrors.occasion}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={formErrors.name}>\n                  <FormLabel htmlFor='name'>Name</FormLabel>\n                  <Input\n                    variant='flushed'\n                    data-testid='form-name-input'\n                    id='name'\n                    name='name'\n                    value={formName}\n                    onChange={(e) => { setFormName(e.target.value) }}\n                  />\n                  <FormErrorMessage>{formErrors.name}</FormErrorMessage>\n                </FormControl>\n                <FormControl isInvalid={formErrors.email}>\n                  <FormLabel htmlFor='email'>Email:</FormLabel>\n                  <Input\n                    type='email'\n                    data-testid='form-email-input'\n                    variant='flushed'\n                    id='email'\n                    name='email'\n                    value={formEmail}\n                    onChange={(e) => { setFormEmail(e.target.value) }}\n                  />\n                  <FormErrorMessage>{formErrors.email}</FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Button\n                data-testid='form-submit-button'\n                type='submit'\n                colorScheme='purple'\n                width='full'\n                isLoading={isLoading}\n                aria-label='Submit Form'\n              >\n                Make Your reservation\n              </Button>\n            </VStack>\n          </form>\n        </Box>\n      </VStack>\n    </div>\n  )\n}\n\nexport default BookingForm\n","export const seededRandom = function (seed) {\n  const m = 2 ** 35 - 31\n  const a = 185852\n  let s = seed % m\n  return function () {\n    return (s = s * a % m) / m\n  }\n}\n\nexport const fetchAPI = function (date) {\n  const result = []\n  const random = seededRandom(date.getDate())\n\n  for (let i = 17; i <= 23; i++) {\n    if (random() < 0.5) {\n      result.push(i + ':00')\n    }\n    if (random() < 0.5) {\n      result.push(i + ':30')\n    }\n  }\n  return result\n}\nexport const submitAPI = function (formData) {\n  return true\n}\n","import Main from '../components/Main'\nimport Hero from '../components/Hero/Hero'\nimport BookingHeroImg from '../assets/img/reserve-table-hero-image.avif'\nimport BookingForm from '../components/BookingForm/BookingForm'\nimport { useEffect, useReducer, useState, useMemo } from 'react'\nimport { fetchAPI, submitAPI } from '../api/fetchApi'\nimport { useNavigate } from 'react-router-dom'\n\nconst bookingData = {\n  title: 'Reserve a table',\n  image: {\n    src: BookingHeroImg,\n    alt: 'image of food on mane screen'\n  }\n}\n\nexport const initialAvailableTimes = (dataState, date) => {\n  const result = fetchAPI(date)\n  const formattedDate = formatDateToString(date)\n  const availableTimes = result.map(resultItem => {\n    return {\n      value: resultItem,\n      label: resultItem,\n      selected: false,\n      booked: false\n    }\n  })\n  dataState.set(formattedDate, availableTimes)\n  return new Map(dataState)\n}\n\nconst availableTimeReducer = (state, action) => {\n  switch (action.type) {\n    case 'set_time': {\n      const dateTime = state.get(action.payload.date)\n      const newDateTime = dateTime.map(timeItem => {\n        if (timeItem.value === action.payload.time) {\n          return { ...timeItem, selected: true }\n        }\n        return { ...timeItem, selected: false }\n      })\n      state.set(action.payload.date, newDateTime)\n      return new Map(state)\n    }\n    case 'new_day': {\n      return initialAvailableTimes(state, action.payload)\n    }\n    case 'reserve_time': {\n      const availableTime = state.get(action.payload.date)\n      if (availableTime && Array.isArray(availableTime)) {\n        availableTime.forEach(time => {\n          if (time.value === action.payload.time) {\n            time.booked = true\n          }\n          time.selected = false\n        })\n        state.set(availableTime)\n        return new Map(state)\n      }\n      return state\n    }\n  }\n  throw Error('Unknown action: ' + action.type)\n}\n\nfunction formatDateToString (date) {\n  const month = String((date.getMonth() + 1)).padStart(2, '0')\n  const day = String((date.getDate())).padStart(2, '0')\n  const year = String((date.getFullYear()))\n  return `${year}-${month}-${day}`\n}\n\nconst BookingPage = () => {\n  const [availableTimes, updateTimes] = useReducer(\n    availableTimeReducer,\n    new Map(),\n    () => initialAvailableTimes(new Map(), new Date()))\n  const [formDate, setFormDate] = useState(formatDateToString(new Date()))\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (formDate) {\n      updateTimes({ type: 'new_day', payload: new Date(formDate) })\n    }\n  }, [formDate])\n\n  const currentDateAvailableTimes = useMemo(() => {\n    const currentDateAvailableTimes = availableTimes.get(formDate)\n    return currentDateAvailableTimes || []\n  }, [availableTimes, formDate])\n\n  const submitFormHandler = (formData) => {\n    const result = submitAPI(formData)\n    if (result === true) {\n      updateTimes({ type: 'reserve_time', payload: { time: formData.get('time'), date: formData.get('date') } })\n      navigate('/confirm')\n    }\n  }\n\n  return (\n    <Main>\n      <Hero\n        title={bookingData.title}\n        subtitle={bookingData.subtitle}\n        text={bookingData.text}\n        button={bookingData.button}\n        image={bookingData.image}\n      />\n      <BookingForm\n        availableTimes={currentDateAvailableTimes}\n        updateTimes={updateTimes}\n        formDate={formDate}\n        setFormDate={setFormDate}\n        submitForm={submitFormHandler}\n      />\n    </Main>\n  )\n}\n\nexport default BookingPage\n"],"names":["wait","ms","Promise","resolve","setTimeout","_useState","useState","_useState2","_slicedToArray","isLoading","setLoading","_useState3","_useState4","response","setResponse","submit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","data","random","wrap","_context","prev","next","Math","Error","type","message","concat","firstName","t0","finish","stop","_x","_x2","apply","arguments","occasionValues","value","label","availableTimes","updateTimes","formDate","setFormDate","submitForm","_useSubmit","useSubmit","onOpen","useAlertContext","formRef","useRef","formNumberInput","setFormNumberInput","formOccasion","setFormOccasion","_useState5","_useState6","formName","setFormName","_useState7","_useState8","formEmail","setFormEmail","_useState9","_useState10","formErrors","setFormErrors","selectedTime","useMemo","_step","_iterator","_createForOfIteratorHelper","s","n","done","timeItem","selected","err","e","f","onFormSubmit","_ref2","formData","formShema","errors","preventDefault","FormData","target","object","name","string","required","email","date","default","Date","time","numberInput","occasion","validate","Object","fromEntries","_toConsumableArray","entries","abortEarly","inner","reduce","acc","error","_objectSpread","_defineProperty","path","keys","length","useEffect","_jsx","spacing","children","VStack","w","maxW","p","alignItems","className","Box","py","rounded","ref","current","onSubmit","_jsxs","Heading","variant","mb","as","FormControl","FormLabel","htmlFor","Input","id","onChange","Select","payload","map","avTime","disabled","booked","isInvalid","NumberInput","min","max","NumberInputField","FormErrorMessage","Button","colorScheme","width","fetchAPI","result","seed","m","pow","seededRandom","getDate","i","push","bookingData","title","image","src","BookingHeroImg","alt","initialAvailableTimes","dataState","formattedDate","formatDateToString","resultItem","set","Map","availableTimeReducer","state","action","newDateTime","get","availableTime","Array","isArray","forEach","month","String","getMonth","padStart","day","year","getFullYear","_useReducer","useReducer","_useReducer2","navigate","useNavigate","currentDateAvailableTimes","Main","Hero","subtitle","text","button","BookingForm"],"sourceRoot":""}